
// ==WindhawkMod==
// @id      hooks-spy-mod
// @name    Spy for function calls
// @description     Print the names of functions being called
// @version 0.1
// @author  DarkionAvey
// @include explorer.exe
// @compilerOptions -ldwmapi -lole32 -loleaut32 -lruntimeobject -lshcore
// ==/WindhawkMod==

// ==WindhawkModReadme==
/*
This mod prints the names of functions being called.
*/
// ==/WindhawkModReadme==

#include <windhawk_utils.h>
#include <windhawk_api.h>
#include <dwmapi.h>
#include <commctrl.h>
#include <roapi.h>
#include <winstring.h>

// Generated by script

using GenericInterface = void (WINAPI *)(const bool&);

static GenericInterface StartAepAnimatedIconOpacityAnimation_call = nullptr;
static GenericInterface StartAugmentedEntryPointEntranceAnimation_call = nullptr;
static GenericInterface StartAugmentedEntryPointExitAnimation_call = nullptr;
static GenericInterface StartBadgeEntranceAnimation_call = nullptr;
static GenericInterface StartBadgeExitAnimation_call = nullptr;
static GenericInterface StartFlyoutEntranceAnimation_call = nullptr;
static GenericInterface StartFlyoutExitAnimation_call = nullptr;
static GenericInterface StartFlyoutSizeChangedAnimation_call = nullptr;
static GenericInterface StartIconSizeChangeAnimation_call = nullptr;
static GenericInterface StartItemDragCompletedScaleAnimation_call = nullptr;
static GenericInterface StartItemDragStartedScaleAnimation_call = nullptr;
static GenericInterface StartItemEntranceAnimation_call = nullptr;
static GenericInterface StartItemMinimizeAnimation_call = nullptr;
static GenericInterface StartItemPlateEntranceAnimation_call = nullptr;
static GenericInterface StartItemPressedScaleAnimation_call = nullptr;
static GenericInterface StartItemReleasedScaleAnimation_call = nullptr;
static GenericInterface StartItemRestoreAnimation_call = nullptr;
static GenericInterface StartItemTranslationAnimation_call = nullptr;
static GenericInterface StartLabelAnimation_call = nullptr;
static GenericInterface StartMostRecentlyUsedSwitchAnimation_call = nullptr;
static GenericInterface StartOverflowButtonEntranceAnimation_call = nullptr;
static GenericInterface StartPaginationButtonDisabledOpacityAnimation_call = nullptr;
static GenericInterface StartPaginationButtonEnabledOpacityAnimation_call = nullptr;
static GenericInterface StartPaginationButtonReleasedAnimation_call = nullptr;
static GenericInterface StartRequestingAttentionAnimation_call = nullptr;
static GenericInterface StartRunningIndicatorSizeChangeAnimation_call = nullptr;
static GenericInterface StartTransitionFromOverflowToTaskbarAnimation_call = nullptr;
static GenericInterface StartTransitionFromOverflowToTaskbarScaleAnimation_call = nullptr;


void WINAPI StartAepAnimatedIconOpacityAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartAepAnimatedIconOpacityAnimation");
    StartAepAnimatedIconOpacityAnimation_call(b);
}


void WINAPI StartAugmentedEntryPointEntranceAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartAugmentedEntryPointEntranceAnimation");
    StartAugmentedEntryPointEntranceAnimation_call(b);
}


void WINAPI StartAugmentedEntryPointExitAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartAugmentedEntryPointExitAnimation");
    StartAugmentedEntryPointExitAnimation_call(b);
}


void WINAPI StartBadgeEntranceAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartBadgeEntranceAnimation");
    StartBadgeEntranceAnimation_call(b);
}


void WINAPI StartBadgeExitAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartBadgeExitAnimation");
    StartBadgeExitAnimation_call(b);
}


void WINAPI StartFlyoutEntranceAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartFlyoutEntranceAnimation");
    StartFlyoutEntranceAnimation_call(b);
}


void WINAPI StartFlyoutExitAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartFlyoutExitAnimation");
    StartFlyoutExitAnimation_call(b);
}


void WINAPI StartFlyoutSizeChangedAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartFlyoutSizeChangedAnimation");
    StartFlyoutSizeChangedAnimation_call(b);
}


void WINAPI StartIconSizeChangeAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartIconSizeChangeAnimation");
    StartIconSizeChangeAnimation_call(b);
}


void WINAPI StartItemDragCompletedScaleAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartItemDragCompletedScaleAnimation");
    StartItemDragCompletedScaleAnimation_call(b);
}


void WINAPI StartItemDragStartedScaleAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartItemDragStartedScaleAnimation");
    StartItemDragStartedScaleAnimation_call(b);
}


void WINAPI StartItemEntranceAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartItemEntranceAnimation");
    StartItemEntranceAnimation_call(b);
}


void WINAPI StartItemMinimizeAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartItemMinimizeAnimation");
    StartItemMinimizeAnimation_call(b);
}


void WINAPI StartItemPlateEntranceAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartItemPlateEntranceAnimation");
    StartItemPlateEntranceAnimation_call(b);
}


void WINAPI StartItemPressedScaleAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartItemPressedScaleAnimation");
    StartItemPressedScaleAnimation_call(b);
}


void WINAPI StartItemReleasedScaleAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartItemReleasedScaleAnimation");
    StartItemReleasedScaleAnimation_call(b);
}


void WINAPI StartItemRestoreAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartItemRestoreAnimation");
    StartItemRestoreAnimation_call(b);
}


void WINAPI StartItemTranslationAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartItemTranslationAnimation");
    StartItemTranslationAnimation_call(b);
}


void WINAPI StartLabelAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartLabelAnimation");
    StartLabelAnimation_call(b);
}


void WINAPI StartMostRecentlyUsedSwitchAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartMostRecentlyUsedSwitchAnimation");
    StartMostRecentlyUsedSwitchAnimation_call(b);
}


void WINAPI StartOverflowButtonEntranceAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartOverflowButtonEntranceAnimation");
    StartOverflowButtonEntranceAnimation_call(b);
}


void WINAPI StartPaginationButtonDisabledOpacityAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartPaginationButtonDisabledOpacityAnimation");
    StartPaginationButtonDisabledOpacityAnimation_call(b);
}


void WINAPI StartPaginationButtonEnabledOpacityAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartPaginationButtonEnabledOpacityAnimation");
    StartPaginationButtonEnabledOpacityAnimation_call(b);
}


void WINAPI StartPaginationButtonReleasedAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartPaginationButtonReleasedAnimation");
    StartPaginationButtonReleasedAnimation_call(b);
}


void WINAPI StartRequestingAttentionAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartRequestingAttentionAnimation");
    StartRequestingAttentionAnimation_call(b);
}


void WINAPI StartRunningIndicatorSizeChangeAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartRunningIndicatorSizeChangeAnimation");
    StartRunningIndicatorSizeChangeAnimation_call(b);
}


void WINAPI StartTransitionFromOverflowToTaskbarAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartTransitionFromOverflowToTaskbarAnimation");
    StartTransitionFromOverflowToTaskbarAnimation_call(b);
}


void WINAPI StartTransitionFromOverflowToTaskbarScaleAnimation_Hook(const bool& b) {
    Wh_Log(L"[Hook] TaskbarTelemetry::StartTransitionFromOverflowToTaskbarScaleAnimation");
    StartTransitionFromOverflowToTaskbarScaleAnimation_call(b);
}


bool InitAllHooks() {
    HMODULE module = LoadLibrary(L"Taskbar.View.dll");
    if (!module) {
        Wh_Log(L"Failed to load Taskbar.View.dll");
        return false;
    }

    bool anyHooked = false;
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartAepAnimatedIconOpacityAnimation<bool const &>(bool const &))" },
            &StartAepAnimatedIconOpacityAnimation_call,
            StartAepAnimatedIconOpacityAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartAepAnimatedIconOpacityAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartAepAnimatedIconOpacityAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartAugmentedEntryPointEntranceAnimation<bool const &>(bool const &))" },
            &StartAugmentedEntryPointEntranceAnimation_call,
            StartAugmentedEntryPointEntranceAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartAugmentedEntryPointEntranceAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartAugmentedEntryPointEntranceAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartAugmentedEntryPointExitAnimation<bool const &>(bool const &))" },
            &StartAugmentedEntryPointExitAnimation_call,
            StartAugmentedEntryPointExitAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartAugmentedEntryPointExitAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartAugmentedEntryPointExitAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartBadgeEntranceAnimation<bool const &>(bool const &))" },
            &StartBadgeEntranceAnimation_call,
            StartBadgeEntranceAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartBadgeEntranceAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartBadgeEntranceAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartBadgeExitAnimation<bool const &>(bool const &))" },
            &StartBadgeExitAnimation_call,
            StartBadgeExitAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartBadgeExitAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartBadgeExitAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartFlyoutEntranceAnimation<bool const &>(bool const &))" },
            &StartFlyoutEntranceAnimation_call,
            StartFlyoutEntranceAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartFlyoutEntranceAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartFlyoutEntranceAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartFlyoutExitAnimation<bool const &>(bool const &))" },
            &StartFlyoutExitAnimation_call,
            StartFlyoutExitAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartFlyoutExitAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartFlyoutExitAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartFlyoutSizeChangedAnimation<bool const &>(bool const &))" },
            &StartFlyoutSizeChangedAnimation_call,
            StartFlyoutSizeChangedAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartFlyoutSizeChangedAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartFlyoutSizeChangedAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartIconSizeChangeAnimation<bool const &>(bool const &))" },
            &StartIconSizeChangeAnimation_call,
            StartIconSizeChangeAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartIconSizeChangeAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartIconSizeChangeAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartItemDragCompletedScaleAnimation<bool const &>(bool const &))" },
            &StartItemDragCompletedScaleAnimation_call,
            StartItemDragCompletedScaleAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartItemDragCompletedScaleAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartItemDragCompletedScaleAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartItemDragStartedScaleAnimation<bool const &>(bool const &))" },
            &StartItemDragStartedScaleAnimation_call,
            StartItemDragStartedScaleAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartItemDragStartedScaleAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartItemDragStartedScaleAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartItemEntranceAnimation<bool const &>(bool const &))" },
            &StartItemEntranceAnimation_call,
            StartItemEntranceAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartItemEntranceAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartItemEntranceAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartItemMinimizeAnimation<bool const &>(bool const &))" },
            &StartItemMinimizeAnimation_call,
            StartItemMinimizeAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartItemMinimizeAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartItemMinimizeAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartItemPlateEntranceAnimation<bool const &>(bool const &))" },
            &StartItemPlateEntranceAnimation_call,
            StartItemPlateEntranceAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartItemPlateEntranceAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartItemPlateEntranceAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartItemPressedScaleAnimation<bool const &>(bool const &))" },
            &StartItemPressedScaleAnimation_call,
            StartItemPressedScaleAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartItemPressedScaleAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartItemPressedScaleAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartItemReleasedScaleAnimation<bool const &>(bool const &))" },
            &StartItemReleasedScaleAnimation_call,
            StartItemReleasedScaleAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartItemReleasedScaleAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartItemReleasedScaleAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartItemRestoreAnimation<bool const &>(bool const &))" },
            &StartItemRestoreAnimation_call,
            StartItemRestoreAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartItemRestoreAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartItemRestoreAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartItemTranslationAnimation<bool const &>(bool const &))" },
            &StartItemTranslationAnimation_call,
            StartItemTranslationAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartItemTranslationAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartItemTranslationAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartLabelAnimation<bool const &>(bool const &))" },
            &StartLabelAnimation_call,
            StartLabelAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartLabelAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartLabelAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartMostRecentlyUsedSwitchAnimation<bool const &>(bool const &))" },
            &StartMostRecentlyUsedSwitchAnimation_call,
            StartMostRecentlyUsedSwitchAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartMostRecentlyUsedSwitchAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartMostRecentlyUsedSwitchAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartOverflowButtonEntranceAnimation<bool const &>(bool const &))" },
            &StartOverflowButtonEntranceAnimation_call,
            StartOverflowButtonEntranceAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartOverflowButtonEntranceAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartOverflowButtonEntranceAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartPaginationButtonDisabledOpacityAnimation<bool const &>(bool const &))" },
            &StartPaginationButtonDisabledOpacityAnimation_call,
            StartPaginationButtonDisabledOpacityAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartPaginationButtonDisabledOpacityAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartPaginationButtonDisabledOpacityAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartPaginationButtonEnabledOpacityAnimation<bool const &>(bool const &))" },
            &StartPaginationButtonEnabledOpacityAnimation_call,
            StartPaginationButtonEnabledOpacityAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartPaginationButtonEnabledOpacityAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartPaginationButtonEnabledOpacityAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartPaginationButtonReleasedAnimation<bool const &>(bool const &))" },
            &StartPaginationButtonReleasedAnimation_call,
            StartPaginationButtonReleasedAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartPaginationButtonReleasedAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartPaginationButtonReleasedAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartRequestingAttentionAnimation<bool const &>(bool const &))" },
            &StartRequestingAttentionAnimation_call,
            StartRequestingAttentionAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartRequestingAttentionAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartRequestingAttentionAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartRunningIndicatorSizeChangeAnimation<bool const &>(bool const &))" },
            &StartRunningIndicatorSizeChangeAnimation_call,
            StartRunningIndicatorSizeChangeAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartRunningIndicatorSizeChangeAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartRunningIndicatorSizeChangeAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartTransitionFromOverflowToTaskbarAnimation<bool const &>(bool const &))" },
            &StartTransitionFromOverflowToTaskbarAnimation_call,
            StartTransitionFromOverflowToTaskbarAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartTransitionFromOverflowToTaskbarAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartTransitionFromOverflowToTaskbarAnimation hook failed");
        }
    }
    {
        WindhawkUtils::SYMBOL_HOOK hook = {
            { LR"(public: static void __cdecl TaskbarTelemetry::StartTransitionFromOverflowToTaskbarScaleAnimation<bool const &>(bool const &))" },
            &StartTransitionFromOverflowToTaskbarScaleAnimation_call,
            StartTransitionFromOverflowToTaskbarScaleAnimation_Hook
        };
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {
            Wh_Log(L"StartTransitionFromOverflowToTaskbarScaleAnimation hooked successfully");
            anyHooked = true;
        } else {
            Wh_Log(L"StartTransitionFromOverflowToTaskbarScaleAnimation hook failed");
        }
    }
    return anyHooked;
}

BOOL Wh_ModInit() {
    if (!InitAllHooks()) {
        Wh_Log(L"No hooks succeeded");
        return FALSE;
    }
    return TRUE;
}

void Wh_ModUninit() {}
void Wh_ModSettingsChanged() {}
