import re
import sys
import os

cpp_template = r'''
// ==WindhawkMod==
// @id      hooks-spy-mod
// @name    Spy for function calls
// @description     Print the names of functions being called
// @version 0.1
// @author  DarkionAvey
// @include explorer.exe
// @compilerOptions -ldwmapi -lole32 -loleaut32 -lruntimeobject -lshcore
// ==/WindhawkMod==

// ==WindhawkModReadme==
/*
This mod prints the names of functions being called.
*/
// ==/WindhawkModReadme==

#include <windhawk_utils.h>
#include <windhawk_api.h>
#include <dwmapi.h>
#include <commctrl.h>
#include <roapi.h>
#include <winstring.h>

// Generated by script

using GenericInterface = void (WINAPI *)(const bool&);

{ptr_decls}

{hook_funcs}

bool InitAllHooks() {{
    HMODULE module = LoadLibrary(L"Taskbar.View.dll");
    if (!module) {{
        Wh_Log(L"Failed to load Taskbar.View.dll");
        return false;
    }}

    bool anyHooked = false;
{init_calls}
    return anyHooked;
}}

BOOL Wh_ModInit() {{
    if (!InitAllHooks()) {{
        Wh_Log(L"No hooks succeeded");
        return FALSE;
    }}
    return TRUE;
}}

void Wh_ModUninit() {{}}
void Wh_ModSettingsChanged() {{}}
'''

symbol_template = 'public: static void __cdecl TaskbarTelemetry::{name}<bool const &>(bool const &)'

def extract_method_names(text):
    # find all occurrences of TaskbarTelemetry::<Name><
    return re.findall(r'TaskbarTelemetry::(\w+)<', text)

def generate_code(methods):
    ptr_decls = [f"static GenericInterface {m}_call = nullptr;" for m in methods]
    hook_funcs = []
    init_calls = []
    for name in methods:
        hook_funcs.append(f'''
void WINAPI {name}_Hook(const bool& b) {{
    Wh_Log(L"[Hook] TaskbarTelemetry::{name}");
    {name}_call(b);
}}
''')
        init_calls.append(f'''    {{
        WindhawkUtils::SYMBOL_HOOK hook = {{
            {{ LR"({symbol_template.format(name=name)})" }},
            &{name}_call,
            {name}_Hook
        }};
        if (WindhawkUtils::HookSymbols(module, &hook, 1)) {{
            Wh_Log(L"{name} hooked successfully");
            anyHooked = true;
        }} else {{
            Wh_Log(L"{name} hook failed");
        }}
    }}''')

    return cpp_template.format(
        ptr_decls="\n".join(ptr_decls),
        hook_funcs="\n".join(hook_funcs),
        init_calls="\n".join(init_calls)
    )

if __name__ == "__main__":
    # read pasted block from stdin
    print("Paste your block of text, then press Ctrl-D (Linux/macOS) or Ctrl-Z then Enter (Windows):")
    text = sys.stdin.read()
    methods = extract_method_names(text)
    if not methods:
        print("No method names found. Make sure your pasted text contains 'TaskbarTelemetry::<Name><'.")
        sys.exit(1)

    code = generate_code(methods)
    out_path = "tb_view_generated_hooks_spy_mod.cpp"
    with open(out_path, "w") as f:
        f.write(code)
    print(f"Generated {out_path} with {len(methods)} hooks.")